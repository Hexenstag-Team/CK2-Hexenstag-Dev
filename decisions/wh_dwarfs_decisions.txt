###Dwarfs
targetted_decisions = {
	grudge_demand_compensation = {
		ai_check_interval = 6
		ai_target_filter = rivals
		filter = all
		only_playable = yes #was only_rulers, I don't think we'll miss Barons demanding compensation

		from_potential = {
			trait = creature_dwarf
			religion_group = dwarf_gods_group
			is_ruler = yes
			NOT = { has_character_flag = demanding_grudge_compensation }
			NOT = { has_character_modifier = ai_grudge_cooldown }
		}

		potential = {
			reverse_has_opinion_modifier = { who = FROM modifier = opinion_dwarf_grudge }
			NOT = { character = FROM }
		}

		allow = {
			FROM = {
				custom_tooltip = {
					text = IS_NOT_INCAPACITATED
					is_incapacitated_trigger = no
				}
			}

		}

		effect = {
			FROM = {
				character_event = { id = DR_dwarfs.9 }
				set_character_flag = demanding_grudge_compensation
				if = {
					limit = { ai = yes }
					add_character_modifier = {
						name = ai_grudge_cooldown
						duration = 60
						hidden = yes
					}
				}
			}
		}

		ai_will_do = {
			factor = 1
			modifier = {
				factor = 0.1
			}
			modifier = {
				factor = 2
				FROM = { trait = greedy }
			}
			modifier = {
				factor = 2
				FROM = { trait = ambitious }
			}
			modifier = {
				factor = 0.1
				FROM = { trait = proud }
			}
			modifier = {
				factor = 0.1
				FROM = { trait = stubborn }
			}
		}
	}
}

decisions = {
	raise_throngs = {
		ai_check_interval = 6
		only_playable = yes
		is_high_prio = yes
		is_mercenary = yes

		potential = {
			is_playable = yes
			is_landed = yes
			OR = {
				religion = ancestor_gods
				religion = norse_ancestor_gods
			}
			NOT = { has_character_modifier = summoned_throngs }
		}

		allow = {
			war = yes
			custom_tooltip = {
				text = raise_defensive_unit_tooltip

				hidden_tooltip = {
					any_war = {
						is_primary_war_defender = yes

						#Defending against heathen
						OR = {
							#Defender is ancestor gods but attacker is not
							AND = {
								ROOT = {
									religion = ancestor_gods
								}
								attacker = {
									NOT = {
										religion = ancestor_gods
									}
								}
							}

							#Defender is norse ancestor gods but attacker is not
							AND = {
								ROOT = {
									religion = norse_ancestor_gods
								}
								attacker = {
									NOT = {
										religion = norse_ancestor_gods
									}
								}
							}
						}
					}
				}
			}
			piety = 100
		}

		effect = {
			custom_tooltip = { text = summon_defensive_throng }
			piety = -80

			hidden_tooltip = {
				add_character_modifier = {
    				name = summoned_throngs
    				duration = 365
    				hidden = yes
				}
				capital_scope = {
					ROOT = {
						spawn_unit = {
							owner = ROOT
							home = PREV
							province = PREV
							disband_on_peace = yes
							maintenance_multiplier = 0.25
							attrition = 1.0

							troops = {
								heavy_infantry = { 1000 1000 }
								archers = { 600 600 }
							}
						}
					}
				}
			}
		}

		revoke_allowed = {
			always = no
		}

		ai_will_do = {
			factor = 0
		}
	}
	open_book_of_grudges = {
		ai = no
		is_high_prio = yes
		only_rulers = yes
		potential = {
			religion_group = dwarf_gods_group
			trait = creature_dwarf
		}
		allow = {
		}
		effect = {
			character_event = { id = DR_dwarfs.4 }
		}
		ai_will_do = {
			factor = 0
		}
	}
}

decisions = {
	#Become a mason
	SJ_become_a_mason_decision = {
		ai_check_interval = 12
		only_rulers = yes

		potential = {
			culture_group = dwarf_group
			religion_group = dwarf_gods_group
					is_incapacitated_trigger = no
			NOR = {
				has_character_flag = SJ_have_become_mason
				trait = slow
				trait = infirm
				trait = incapable
				trait = imbecile
			}
			any_realm_province = {
				OR = {
					terrain = hills
					terrain = mountain
					terrain = impassable_mountains
				}
			}
			age = 16
			is_ruler = yes
		}
		allow = {
			OR = {
				trait = diligent
				trait = envious
				trait = ambitious
				trait = zealous
			}
			NOR = {
				trait = stressed
				trait = wroth
			}
		}
		effect = {
			set_character_flag = SJ_dwarfen_new_mason
			set_character_flag = SJ_have_become_mason
			custom_tooltip = {
				text = SJDwarftooltips.tooltip2
			}
			hidden_tooltip = { if = { limit = { ai = no
								NOT = { has_character_flag = SJ_has_had_mason_info_event } }
					narrative_event = { id = SJDwarfevents.4 } } }
		}
		revoke_allowed = {
			always = no
		}
		ai_will_do = {
			factor = 1

			modifier = {
				factor = 5
				trait = architect
			}
			modifier = {
				factor = 5
				trait = envious
			}
			modifier = {
				factor = 5
				trait = ambitious
			}
			modifier = {
				factor = 2
				trait = patient
			}
			modifier = {
				factor = 2
				trait = gardener
			}
			modifier = {
				factor = 2
				trait = zealous
			}
			modifier = {
				factor = 2
				trait = proud
			}
			modifier = {
				factor = 0.5
				trait = craven
			}
			modifier = {
				factor = 0.5
				trait = humble
			}
			modifier = {
				factor = 0
				OR = {
					trait = content
					trait = slothful
					trait = depressed
				}
			}
		}
	}
	#re-create the hammerer regiments from the golden age
	hammerer_regiments = {
		ai_check_interval = 12
		is_high_prio = yes
		only_independent = yes

		potential = {
			realm_size = 80
			tier = emperor
			trait = creature_dwarf
			religion_group = dwarf_gods_group
			culture_group = dwarf_group
			war = no
			is_incapacitated_trigger = no
			AND = {
				OR = {
					any_vassal = {
						trait = hammerer
					}
					any_courtier = {
						trait = hammerer
					}
				}
				count = 2
			}
			is_feudal = yes
			capital_scope = {
				has_empty_holding = yes
			}
			NOT = {
				has_global_flag = hammerer_regiments_reformed
			}
		}

		allow = {
			realm_size = 120
			AND = {
				OR = {
					any_vassal = {
						trait = hammerer
					}
					any_courtier = {
						trait = hammerer
					}
				}
				count = 3
			}
			treasury = 400
		}

		effect = {
			set_global_flag = hammerer_regiments_reformed
			prestige = 200
			piety = 20
			d_the_hammerers = {
				holder_scope = {
					set_defacto_liege = ROOT
					ROOT = {
						capital_scope = {
							build_holding = {
								type = castle
								holder = PREVPREV
							}
						}
					}
				}
			}
			treasury = -400
		}

		revoke_allowed = {
			always = no
		}

		ai_will_do = {
			factor = 100
		}
	}
}
